/*
* generated by Xtext
*/
package fr.imag.exschema.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.imag.exschema.xtext.services.ExSchemaGrammarAccess;

public class ExSchemaParser extends AbstractContentAssistParser {
	
	@Inject
	private ExSchemaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.imag.exschema.xtext.ui.contentassist.antlr.internal.InternalExSchemaParser createParser() {
		fr.imag.exschema.xtext.ui.contentassist.antlr.internal.InternalExSchemaParser result = new fr.imag.exschema.xtext.ui.contentassist.antlr.internal.InternalExSchemaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
					put(grammarAccess.getSchemaAccess().getGroup_0(), "rule__Schema__Group_0__0");
					put(grammarAccess.getSet_Access().getGroup(), "rule__Set___Group__0");
					put(grammarAccess.getSet_Access().getGroup_2(), "rule__Set___Group_2__0");
					put(grammarAccess.getSet_Access().getGroup_3(), "rule__Set___Group_3__0");
					put(grammarAccess.getStruct_Access().getGroup(), "rule__Struct___Group__0");
					put(grammarAccess.getStruct_Access().getGroup_2(), "rule__Struct___Group_2__0");
					put(grammarAccess.getStruct_Access().getGroup_3(), "rule__Struct___Group_3__0");
					put(grammarAccess.getRelationship_Access().getGroup(), "rule__Relationship___Group__0");
					put(grammarAccess.getRelationship_Access().getGroup_2(), "rule__Relationship___Group_2__0");
					put(grammarAccess.getRelationship_Access().getGroup_3(), "rule__Relationship___Group_3__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getSchemaAccess().getAttributesAssignment_0_1(), "rule__Schema__AttributesAssignment_0_1");
					put(grammarAccess.getSchemaAccess().getEntitiesAssignment_1(), "rule__Schema__EntitiesAssignment_1");
					put(grammarAccess.getSet_Access().getNameAssignment_1(), "rule__Set___NameAssignment_1");
					put(grammarAccess.getSet_Access().getAttributesAssignment_2_1(), "rule__Set___AttributesAssignment_2_1");
					put(grammarAccess.getSet_Access().getEntitiesAssignment_3_1(), "rule__Set___EntitiesAssignment_3_1");
					put(grammarAccess.getStruct_Access().getNameAssignment_1(), "rule__Struct___NameAssignment_1");
					put(grammarAccess.getStruct_Access().getAttributesAssignment_2_1(), "rule__Struct___AttributesAssignment_2_1");
					put(grammarAccess.getStruct_Access().getEntitiesAssignment_3_1(), "rule__Struct___EntitiesAssignment_3_1");
					put(grammarAccess.getRelationship_Access().getNameAssignment_1(), "rule__Relationship___NameAssignment_1");
					put(grammarAccess.getRelationship_Access().getAttributesAssignment_2_1(), "rule__Relationship___AttributesAssignment_2_1");
					put(grammarAccess.getRelationship_Access().getStartAssignment_3_3(), "rule__Relationship___StartAssignment_3_3");
					put(grammarAccess.getRelationship_Access().getEndAssignment_3_6(), "rule__Relationship___EndAssignment_3_6");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getValueAssignment_2(), "rule__Attribute__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.imag.exschema.xtext.ui.contentassist.antlr.internal.InternalExSchemaParser typedParser = (fr.imag.exschema.xtext.ui.contentassist.antlr.internal.InternalExSchemaParser) parser;
			typedParser.entryRuleSchema();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ExSchemaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ExSchemaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
